/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jit.adud3grafica.FramesAuxiliares;

import Objetos.*;
import java.awt.Component;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JOptionPane;
import static jit.adud3grafica.Metodos.*;
import static jit.adud3grafica.OperacionesBD.*;

/**
 *
 * @author jit
 */
public class JFrameTendas extends javax.swing.JFrame {

    private Tenda tenda;
    private Producto producto;

    /**
     * Creates new form tendas
     */
    public JFrameTendas() {
        initComponents();
        this.setLocationRelativeTo(null);

        formatearCombos();
        
        llenarComboProvincias();
        llenarComboProductos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxProv = new javax.swing.JComboBox<>();
        jComboBoxTenda = new javax.swing.JComboBox<>();
        jButtonEliminar = new javax.swing.JButton();
        jTextFieldNome = new javax.swing.JTextField();
        jButtonInsertar = new javax.swing.JButton();
        jTextFieldCidade = new javax.swing.JTextField();
        jComboBoxProd = new javax.swing.JComboBox<>();
        jTextFieldCantidade = new javax.swing.JTextField();
        jButtonInsertar1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jComboBoxProv.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxProvItemStateChanged(evt);
            }
        });

        jComboBoxTenda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxTendaItemStateChanged(evt);
            }
        });

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jTextFieldNome.setText("None");
        jTextFieldNome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldNomeMouseClicked(evt);
            }
        });

        jButtonInsertar.setText("Insertar");
        jButtonInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertarActionPerformed(evt);
            }
        });

        jTextFieldCidade.setText("Cidade");
        jTextFieldCidade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldCidadeMouseClicked(evt);
            }
        });

        jComboBoxProd.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxProdItemStateChanged(evt);
            }
        });

        jTextFieldCantidade.setText("Cantidade");
        jTextFieldCantidade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldCantidadeMouseClicked(evt);
            }
        });

        jButtonInsertar1.setText("Actualizar Stock");
        jButtonInsertar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxProd, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldNome)
                            .addComponent(jComboBoxProv, 0, 189, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxTenda, 0, 189, Short.MAX_VALUE)
                            .addComponent(jTextFieldCidade)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldCantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonInsertar1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonInsertar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxProv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxTenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEliminar))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonInsertar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxProd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonInsertar1))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxTendaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxTendaItemStateChanged
        tenda = (Tenda) jComboBoxTenda.getSelectedItem();
    }//GEN-LAST:event_jComboBoxTendaItemStateChanged

    private void jComboBoxProvItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxProvItemStateChanged
        llenarComboTendas();
        llenarComboProductos();
    }//GEN-LAST:event_jComboBoxProvItemStateChanged

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed

        //eliminar tienda
        if (tenda.getIdTenda() != 0) {
            try {
                Connection con = conexion();
                deleteTenda(con, tenda);
                deleteStockTenda(con, tenda);
                llenarComboTendas();
                llenarComboProductos();

                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(JFrameTendas.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertarActionPerformed

        Provincia prov = (Provincia) jComboBoxProv.getSelectedItem();
        String cidade = jTextFieldCidade.getText();
        String nome = jTextFieldNome.getText();
        int id = prov.getId();

        if (id == 0) {
            JOptionPane.showMessageDialog(null, "Selecciona unha provincia", "Aviso", 2);
        } else if ("".equals(nome) || "".equals(cidade) || "Cidade".equals(cidade) || "Nome".equals(nome)) {
            JOptionPane.showMessageDialog(null, "Introduce nome e cidade", "Aviso", 2);
        } else {
            try {

                Tenda tenda = new Tenda(0, nome, cidade, id);
                Connection con = conexion();
                insertTenda(con, tenda);
                con.close();

                llenarComboTendas();
                llenarComboProductos();
                jTextFieldNome.setText("Nome");
                jTextFieldCidade.setText("Cidade");

            } catch (SQLException ex) {
                Logger.getLogger(JFrameTendas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_jButtonInsertarActionPerformed

    private void jTextFieldNomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldNomeMouseClicked
        jTextFieldNome.setText("");
    }//GEN-LAST:event_jTextFieldNomeMouseClicked

    private void jTextFieldCidadeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldCidadeMouseClicked
        jTextFieldCidade.setText("");
    }//GEN-LAST:event_jTextFieldCidadeMouseClicked

    private void jComboBoxProdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxProdItemStateChanged

        producto = (Producto) jComboBoxProd.getSelectedItem();

        if (producto == null) {
            producto = new Producto(0, "", "", 0);
        } else if (producto.getIdProducto() == 0) {
            jTextFieldCantidade.setText("Cantidade");
        } else if (tenda.getIdTenda() != 0){

            try {
                Connection con = conexion();
                String cantidade = selectStockProductoxTenda(con, producto.getIdProducto(), tenda.getIdTenda());              
                jTextFieldCantidade.setText(cantidade);
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(JFrameTendas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jComboBoxProdItemStateChanged

    private void jTextFieldCantidadeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldCantidadeMouseClicked
        jTextFieldCantidade.setText("");
    }//GEN-LAST:event_jTextFieldCantidadeMouseClicked

    private void jButtonInsertar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertar1ActionPerformed

        Tenda tenda = (Tenda) jComboBoxTenda.getSelectedItem();
        Producto producto = (Producto) jComboBoxProd.getSelectedItem();
        String cantidadeString = jTextFieldCantidade.getText();
        int cantidade = 0;
        if (!isFloat(cantidadeString)) {
            JOptionPane.showMessageDialog(null, "Introduce un valor numerico no campo cantidade", "Aviso", 2);
        } else {
            cantidade = Integer.parseInt(cantidadeString);
        }

        if (tenda.getIdTenda() == 0 && producto.getIdProducto() == 0) {
            JOptionPane.showMessageDialog(null, "Selecciona unha tenda e producto", "Aviso", 2);
        } else {
            try {
                Connection con = conexion();
                insertStockProducto(con, producto, tenda, cantidade);
                con.close();
                llenarComboProductos();
                
            } catch (SQLException ex) {
                Logger.getLogger(JFrameTendas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_jButtonInsertar1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameTendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameTendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameTendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameTendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameTendas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonInsertar;
    private javax.swing.JButton jButtonInsertar1;
    private javax.swing.JComboBox<Producto> jComboBoxProd;
    private javax.swing.JComboBox<Provincia> jComboBoxProv;
    private javax.swing.JComboBox<Tenda> jComboBoxTenda;
    private javax.swing.JTextField jTextFieldCantidade;
    private javax.swing.JTextField jTextFieldCidade;
    private javax.swing.JTextField jTextFieldNome;
    // End of variables declaration//GEN-END:variables

    public void formatearCombos() {
        
        //vista de los valores en los combos
        jComboBoxProv.setRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(
                    JList list, Object value, int index,
                    boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index,
                        isSelected, cellHasFocus);

                if (value != null) {
                    Provincia provincia = (Provincia) value;
                    setText(provincia.getNome());
                }
                return this;
            }
        });

        jComboBoxTenda.setRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(
                    JList list, Object value, int index,
                    boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index,
                        isSelected, cellHasFocus);

                if (value != null) {
                    Tenda tenda = (Tenda) value;
                    setText(tenda.getNome());
                }
                return this;
            }
        });

        jComboBoxProd.setRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(
                    JList list, Object value, int index,
                    boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index,
                        isSelected, cellHasFocus);

                if (value != null) {
                    Producto producto = (Producto) value;
                    setText(producto.getNome());
                }
                return this;
            }
        });
    }

    public void llenarComboProvincias() {

        try {
            //llenamos el conboBox de las provincias existentes
            jComboBoxProv.removeAllItems();

            Provincia provincia0 = new Provincia(0, "Selecciona Provincia");
            jComboBoxProv.addItem(provincia0);

            Connection con = conexion();

            List<Provincia> provincia = selectProvincias(con);
            for (Provincia p : provincia) {
                jComboBoxProv.addItem(p);
            }
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(JFrameTendas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void llenarComboTendas() {

        try {
            //llenamos el conboBox de las provincias existentes
            jComboBoxTenda.removeAllItems();

            Tenda tenda0 = new Tenda(0, "Selecciona Tenda", "", 0);
            jComboBoxTenda.addItem(tenda0);

            Connection con = conexion();

            Provincia provincia = (Provincia) jComboBoxProv.getSelectedItem();

            if (provincia.getId() != 0) {
                List<Tenda> tenda = selectTendaxProv(con, provincia.getId());
                for (Tenda p : tenda) {
                    jComboBoxTenda.addItem(p);
                }
            } else if (provincia.getId() == 0) {
                List<Tenda> tenda = selectTendas(con);
                for (Tenda p : tenda) {
                    jComboBoxTenda.addItem(p);
                }

            }
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(JFrameTendas.class.getName()).log(Level.SEVERE, null, ex);

        }

    }

    private void llenarComboProductos() {
        try {
            //llenamos el conboBox de los productos  existentes
            jComboBoxProd.removeAllItems();

            Producto producto0 = new Producto(0, "Selecciona Producto", "", 0);
            jComboBoxProd.addItem(producto0);

            Connection con = conexion();

            List<Producto> productos = selectProductos(con);
            for (Producto p : productos) {
                jComboBoxProd.addItem(p);
            }
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(JFrameTendas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
